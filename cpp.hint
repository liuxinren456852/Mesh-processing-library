// Microsoft Visual Studio "hint file" to help the IDE parse macro identifiers.
// See https://msdn.microsoft.com/en-us/library/dd997977.aspx
// (In addition to:  C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/vcpackages/cpp.hint )

#define HH_POOL_ALLOCATION(x)
#define HH_INITIALIZE_POOL(x)
#define HH_ALLOCATE_POOL(x)
#define HH_INITIALIZE_POOL_NESTED(x, y)

#define HH_MAKE_SAC(T)
#define HH_MAKE_POOLED_SAC(T)
#define HH_SACABLE(T)
#define HH_SAC_INITIALIZATION(T)
#define HH_SAC_ALLOCATE_CD(sac, type)
#define HH_SAC_ALLOCATE(sac, type)
#define HH_SAC_ALLOCATE_FUNC(sac, type, accessfunc)
#define HH_SAC_ALLOCATE_CD_FUNC(sac, type, accessfunc)

#define HH_TIMER(x)
#define HH_CTIMER(x)
#define HH_DTIMER(x)
#define HH_ATIMER(x)
#define HH_STIMER(x)
#define HH_PTIMER(x)

#define HH_STAT(S) hh::Stat S(#S, true)
#define HH_STAT_NP(S) hh::Stat S(#S, false)
#define HH_SSTAT(S, v) do { static hh::Stat S(#S, true, true); S.enter(v); } while (false)
#define HH_SSTAT_RMS(S, v) do { static hh::Stat S(#S, true, true); S.set_rms(); S.enter(v); } while (false)
#define HH_RSTAT(S, range) do { HH_STAT(S); for (auto e : range) { S.enter(e); } } while (false)
#define HH_RSTAT_RMS(S, range) do { HH_STAT(S); S.set_rms(); for (auto e : range) { S.enter(e); } } while (false)

#define AS(x) x

#define JPP(arglist) arglist  // Image_IO.cpp jpeglib.h
#define E(x)  // MathOp.h and others

#define for_T_aux(T, i, start, stop, stop_var) for (T stop_var = stop, i = start; i < stop_var; i++)
#define for_T(T, i, start, stop) for_T_aux(T, i, start, stop, HH_UNIQUE_ID(stop_var))
#define for_int(i, stop) for_T(int, i, 0, stop)
#define for_intL(i, start, stop) for_T(int, i, start, stop)
#define for_size_t(i, stop) for_T(std::size_t, i, 0, stop)

#define HH_PRINTF_ATTRIBUTE(x)

#define SHOW(x)
#define SHOWL

#define HH_DECLARE_OSTREAM_EOL(...)                                                             \
    struct has_ostream_eol_aux<__VA_ARGS__> { static CONSTEXPR bool value() { return true; } }
#define HH_DECLARE_OSTREAM_RANGE(...)
