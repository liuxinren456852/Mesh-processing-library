## Note: this file is included into all other Makefiles.
# It sets default variables, functions, and rules.
# (The "Possible configuration settings" below can be adjusted.)

ifneq ($(defs_loaded),)   # An include guard; should be checked to avoid loading this file more than once.
  $(error $(lastword $(MAKEFILE_LIST)) loaded more than once)
endif
defs_loaded = 1

# From http://blog.jgc.org/2007/06/escaping-comma-and-space-in-gnu-make.html
space := $() $()
# $(warning Have defined space=[$(space)])

define file_exists
$(if $(wildcard $(subst $(space),\$(space),$(1))),1,)
endef

# Identify the build system.
is_mswin ?= $(if $(WINDIR)$(windir),1,)#  Check environment variable WINDIR (e.g. C:\\Windows) for Microsoft Windows.
is_cygwin := $(if $(findstring :/cygdrive/,:$(PATH)),1,)#  Running under Cygwin?
is_msys := $(if $(findstring :/c/,:$(PATH)),1,)#  Running under Msys?
is_mac := $(call file_exists,/.DS_Store)#  Running on Mac OS?

ifeq ($(MeshRoot),)
  $(warning MeshRoot variable not set; set to default value of "..")
  MeshRoot ?= ..#  If not already set, best guess is "1 directory above the project file", e.g. for libHh.
endif

# Define the set of possible CONFIG configurations.
ifeq ($(is_mswin),1)
  # We place "win" last so that the last-built libraries are for the default config.
  build_configs ?= w32 mingw clang cygwin win#  Default set for "make makeall" or "make CONFIG=all".
  configs ?=       $(build_configs) $(nonworking_configs)
else
  build_configs ?= unix
  configs ?=       unix
endif
# Set CONFIG to a default if not already set.
# export CONFIG ?= $(word 1,$(build_configs))# Select the first config as default.
export CONFIG ?= $(word $(words $(build_configs)),$(build_configs))# Select the last config as default.
$(if $(filter $(CONFIG),all $(configs)),,$(error CONFIG=$(CONFIG) is not recognized among [all $(configs)]))

win32 ?= $(if $(and $(is_mswin),$(filter-out cygwin,$(CONFIG))),1,)#  Hopefully equivalent to defined(_WIN32).

SHELL = bash#   sh is standard ("for i in $var; do; done"); bash is necessary for "shopt nullglob", [[ ]], etc.

add_drive = $(patsubst /%,$(absdrive)/%,$(1))#  Use $(call add_drive,...) to invoke this macro.

drive_abspath = $(call add_drive,$(abspath $(1)))#  Use $(call drive_abspath,...) to invoke this macro.

ifeq ($(is_msys),1)  # Fix PATH for msys make.
  PATH := $(subst :/hh/,:/c/hh/,$(PATH))
endif

# Print out useful information, if uncommented.
# $(info VER=$(MAKE_VERSION) goals=$(MAKECMDGOALS) is_mswin=$(is_mswin) is_cygwin=$(is_cygwin) is_msys=$(is_msys) win32=$(win32) CONFIG=$(CONFIG) PATH=$(PATH))
# $(info .VARIABLES=$(.VARIABLES))

# http://stackoverflow.com/questions/35516996/gnu-make-prepend-a-recursively-expanded-variable/
# Expand a variable, properly escaping '$' characters.
expand = $(if $(findstring simple,$(flavor $1)),$(subst $$,$$$$,$($1)),$(value $1))

# Prepend to a variable, preserving flavor.
# Usage:
# $(call prepend,VARIABLE,text)           # Prepend text to a recursively expanded $(VARIABLE).
# $(call prepend,list,add some words )    # Remember to add any trailing separator character (e.g. space).
prepend = \
  $(if $(findstring simple,$(flavor $1)), \
    $(eval $1 := $2$(call expand,$1)), \
    $(eval $1 = $2$(call expand,$1)))

# Function to prepend a directory to the current PATH.  This complicated code verifies the existence of the directory,
#  removes any drive letter, adds a /c/ or /cygdrive/c/ prefix, and/or replaces "/" by "\".
# e.g.: $(call prepend_PATH,c:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6 Tools/x64/)
define prepend_PATH
  $(if $(filter clean deepclean cleanall makeall everything,$(MAKECMDGOALS)),, \
    $(if $(call file_exists,$(1)),, \
      $(error Directory $(1) does not exist, so cannot be added to PATH)) \
    $(call prepend,PATH,$(if $(findstring :,$(1)),$(if $(is_cygwin)$(is_msys),$(if $(is_cygwin),/cygdrive,)/$(word 1,$(subst :, ,$(1)))$(wordlist 2,$(words $(subst :, ,$(1))),$(subst :, ,$(1))),$(subst /,\,$(wordlist 2,$(words $(subst :, ,$(1))),$(subst :, ,$(1))))),$(1)):))
endef

MAKEFLAGS += --no-print-directory#  Because print-directory is ugly and ineffective with "-j" (see main.el).

## Possible configuration settings:
cppinc += -D_UNICODE -DUNICODE#  (Useful for alternative testing since my msbuild *.vcxproj does not set it.)
# cppinc += -DHH_HAVE_LAPACK#  By default we no longer use lapack.
# cppinc += -DHH_HAVE_SIMPLEX
# cppinc += -DHH_HAVE_VIDEO_LOOP
# cppinc += -DHH_NO_EXCEPTION_HOOKS
# cppinc += -DHH_NO_TIMERS_CLASS
# cppinc += -DHH_NO_SSE41
# cppinc += -DHH_NO_IMAGE_WIC#  Option for CONFIG=win/w32/clang.
# cppinc += -DHH_IMAGE_LIBS_TOO#  Option for CONFIG=win/w32/clang; default is to just use WIC.
# cppinc += -DHH_NO_VECTOR4_VECTORIZATION#  Otherwise enable SSE / NEON instructions.
# cppinc += -DHH_NO_STACKWALKER
# cppinc += -DHH_NO_LIB_REFERENCES
# cppinc += -DHH_NO_HH_INIT

# Also update clang-tidy command in clean_all, and CXX_STD in Makefile_config_{mingw,cygwin}.
CXX_STD ?= c++17

# PEDANTIC ?= 1

ifeq ($(filter cygwin unix,$(CONFIG)),)  # CONFIG != cygwin or unix  (on cygwin/unix, libjpg and libpng are built-in).
  cppinc += -DHH_NO_IMAGE_LIBS
endif

ignore_compile_warnings ?= 1

have_lapack = $(if $(filter -DHH_HAVE_LAPACK,$(cppinc)),1,)
have_recipes = $(if $(filter -DHH_HAVE_SIMPLEX,$(cppinc)),1,)
have_image_libs = $(if $(filter -DHH_NO_IMAGE_LIBS,$(cppinc)),,1)


# Use CONFIG=all as a way to run gmake successively on all $(build_configs).
# Note two possible issues:
# (1) If the default goal is already defined before this file, a recipe redefinition warning is issued (but it is OK).
# (2) If we forget to hide the subsequent recipe after this file, this later wrong recipe will run.
# (Modifying the variable $(MAKECMDGOALS) would be a solution, but the variable is read-only.)
# Sleep is added to prevent synchronization bugs when using "-j" on successive make invocations in the same directory.

ifeq ($(CONFIG),all)  # There is an else clause below.

override_goal := $(if $(MAKECMDGOALS),$(MAKECMDGOALS),$(if $(.DEFAULT_GOAL),$(.DEFAULT_GOAL),dummy_all))
# $(info have CONFIG=all override_goal=$(override_goal))
$(override_goal):
#	for a in $(build_configs); do echo "**** CONFIG=$$a"; make CONFIG=$$a -j $(MAKECMDGOALS); sleep 1; done
#	$(foreach a,$(build_configs),echo "**** CONFIG=$(a)" && $(MAKE) CONFIG=$(a) -j $(MAKECMDGOALS) && sleep 1 && ) true
	@RESULT=0; $(foreach a,$(if $(filter clean deepclean,$(MAKECMDGOALS)),$(configs),$(build_configs)),$(if $(filter clean deepclean,$(MAKECMDGOALS)),,echo "**** CONFIG=$(a)"; )$(MAKE) CONFIG=$(a) $(MAKECMDGOALS); RESULT=$$((RESULT + $$?)); sleep $(if $(filter clean deepclean,$(MAKECMDGOALS)),0,0.8); ) (exit $$RESULT)
.PHONY: $(override_goal)

else  # ifeq ($(CONFIG),all)  # For the rest of this file.

# Add ./bin so that the script hcheck is in path.
$(call prepend_PATH,$(abspath $(MeshRoot))/bin)

dummy_goal:  # Introduce a dummy goal so that we can reset the .DEFAULT_GOAL below.

.PHONY: dummy_all dummy_goal *.exe cleanall makeall

# Note that the C++ compile command $(CXX) (e.g. "cl", "g++", or "clang++") is also used for all program linking.
# Must appear before rule "%.obj : %.cpp" to take precedence.
# The prefix '@' character (which hides the executed command line) is optional.
# (Use 'make -n' to see these hidden '@' command lines.)
# The "rm -f $@" is introduced to delete any Unix executable "$@" in the same location if building "$@.exe", to avoid
# having that Unix executable being considered when running a *_test.script.
% : %.cpp
	$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(if $(is_mswin:0=),rm -f $@; ,)$(CXX) $(LDOUTPUT) $(CXXFLAGS) $(CPPFLAGS) $(cxxexe) $(TARGET_ARCH) \
	  $(call add_drive,$(foreach f,$<,$(abspath $(f))) $(LDLIBS)) $(LDFLAGS)

% : %.c
	$(if $(plain_compiler:0=)$(DEBUG_MAKE),,@)$(if $(is_mswin:0=),rm -f $@; ,)$(CC) $(LDOUTPUT) $(CFLAGS) $(CPPFLAGS) $(cxxexe) $(TARGET_ARCH) \
	  $(call add_drive,$(foreach f,$<,$(abspath $(f))) $(LDLIBS)) $(LDFLAGS)

include $(dir $(lastword $(MAKEFILE_LIST)))/Makefile_config_$(CONFIG)

ifneq ($(call file_exists,$(MeshRoot)/../hh_src/Makefile_local_defs),)
  include $(MeshRoot)/../hh_src/Makefile_local_defs
endif

*.exe:
	@echo 'Avoid *.exe "$@" as makefile target; use "$(@:%.exe=%)" instead.' && exit 1

cleanall:
	$(MAKE) CONFIG=all -s deepclean

makeall:
	$(MAKE) CONFIG=all

debug_path:  # For debugging.
	echo PATH:$$PATH; which $(CXX)

ifeq ($(.DEFAULT_GOAL),dummy_goal)  # Reset unless previously set.
  .DEFAULT_GOAL :=
endif

dot_quoted_target = .\$$(extobj)#  This variable is cleared in ./Makefile_progs (also included in ./test/Makefile).
make_dep ?= Makefile.dep#   This was Makefile_$(CONFIG).dep but is now independent of CONFIG.
# We need "-march=native" to enable include of <xmmintrin.h>.
# We need "-D_M_IX86" for vt_round.h.
# We need "-DMAKEFILE_DEP" for defined() in precompiled_libHh.h.
cmd_makedep = @echo Creating $(make_dep); \
  g++ -MM -march=native -D_M_IX86 -DHH_NO_SSE41 -DMAKEFILE_DEP $(CPPFLAGS) $(src_c) -std=c++14 $(src_cpp) | \
  perl -pe 'binmode(STDOUT); s/\.o:/$(dot_quoted_target):/g; s@ \.\./include/\S+@@g;' >$(make_dep) \
  || rm -f $(make.dep)

ifeq ($(plain_compiler),)
  includes += -I$(MeshRoot)
endif

include_make_dep = $(if $(filter depend clean deepclean cleanall,$(MAKECMDGOALS)),,1)

absdrive ?= $(if $(is_mswin),c:,)

src_cpp ?= $(wildcard *.cpp)
src_c ?= $(wildcard *.c)
src ?= $(src_cpp) $(src_c)
obj ?= $(strip $(src_cpp:%.cpp=%.$(extobj)) $(src_c:%.c=%.$(extobj)))
# Problem: if we use (notdir obj), then it compiles using (notdir src), and emacs is confused,
#         but if use full dir obj, then gmake ignores file modification times.
#         Compilation directory tracking in emacs does not work with "-j".
# Solution: avoid "c:" paths in makefiles; add "c:" in compiler rules for CONFIG=win/w32.

CPPFLAGS = $(strip $(cppinc) $(includes))
CXXFLAGS = $(strip $(cxxall) $(if $(rel:0=),$(cxxrel),$(cxxdbg)))
CFLAGS = $(strip $(c-all) $(if $(rel:0=),$(crel),$(cdbg)))

# Note: lib$(Hw) must be added as prefix to LDLIBS because lib$(Hw)/Hw.cpp references Image and Buffer in libHh.
ifeq ($(win32),1)
  Hw = HwWindows
else
  Hw = HwX
endif

my_libs ?= Hh#  This can be replaced by an empty value to omit inclusion of libHh.
LDLIBS += $(foreach n,$(my_libs),$(MeshRoot)/lib$(n)/$(if $(or $(extlib:lib=),$(if $(use_vs_libs:0=),,1)),,$(if $(x64:0=),x64,Win32)/$(if $(rel:0=),ReleaseMD,DebugMD)/)lib$(n).$(extlib))

ifneq ($(filter cygwin unix,$(CONFIG)),)  # For CONFIG = cygwin or unix.
  system_libs += $(strip $(if $(have_image_libs),jpeg png z,) $(if $(have_lapack),lapack,))
  LDLIBS += $(foreach n,$(system_libs),-l$(n))
endif

LDLIBS += $(other_libs)#  Optionally defined externally.
LDLIBS += $(last_libs)#  Optionally defined in ./Makefile_config_$(CONFIG).

ifneq ($(have_lapack),)
  # The file <lapacke.h> is in either /usr/include/ or /usr/include/lapacke/.
  ifneq ($(call file_exists,/usr/include/lapacke),)
    includes += -I/usr/include/lapacke
  endif
endif

# Invoke $< which is the first prerequisite (either $(@:%.ou=%) in ./test or $(@:%.ou=%.script) in ./progtest).
# Note: GNU make version 3.81 cannot have an " =" at the end of the next line; strange.
# Also, generally it appears unsafe to embed comments within a define..endef definition.
define cmd_hcheck
  @hcheck $< >/dev/null; status=$$?; if [[ $$status -ne 0 ]]; then echo "$@:1:1: error: hcheck $< exit $$status"; fi; \
  if [ ! -e $(@:%.ou=%.diff) ]; then \
    echo "$@"; \
  else \
    echo "$@:1:1: error: test output differs:  ediff $(@:%.ou=%).{ref,ou}"; \
    if [[ `cat $(@:%.ou=%.diff) | wc -l` -le 30 ]]; then \
      cat $(@:%.ou=%.diff); \
    elif [[ -e $@ ]] && [[ `cat $@ | wc -l` -le 30 ]]; then \
      cat $@; \
    fi; \
  fi
endef

# Test the program % by saving its output into %.ou and then comparing it with the reference output in %.ref.
%.ou : % %.ref
	$(cmd_hcheck)

# If the reference output file %.ref does not exist, assume the output should be empty.  Note that if this the case,
#  %.ref is automatically deleted at the end of make.  Nice.
%.ref :
	touch $@
# .PRECIOUS: %.ref  # Setting this would avoid deleting a temporarily created %.ref.

define cmd_diffs_summary
  @if ls *.diff >&/dev/null; then \
    echo '** Summary of diffs'; \
    for i in *.diff; do \
      echo "* $$i"; \
      if [[ `cat $$i | wc -l` -gt 100 ]]; then echo "Long diff **"; else cat $$i; fi; \
    done; \
  fi
endef

# Not used, although it could be useful:
# makefile0 ?= $(firstword $(MAKEFILE_LIST))

# Note: one may split the execution into non-parallel (for release) and parallel (for the rest targets) phases.
# ifneq ($(filter release,$(MAKECMDGOALS)),)
#   .NOTPARALLEL:
# endif
# release: clean
#     $(MAKE) test1
# Note: .NOTPARALLEL target will suppress parallel execution if release target is mentioned in the command line.
#  The release target itself will rerun Make after cleaning and build test1 in parallel.

# Assembly code listing: several ways to generate this:
# (1) Create the assembly file during normal compilation by adding one of the two following rules to the Makefile.
#   (Note: this approach does not work with clang.)
#  file.$(extobj): cxxall += $(cxx_list_assembly_code)  # For a "%.(extobj) : %.cpp" compilation.
#  file: cxxall += $(cxx_list_assembly_code)            # For a "% : %.cpp" compilation.
# (2) Add a rule to separately create the assembly file:
#   (This adds an expensive additional step.)
#  file.$(extobj) : file.$(extasm)  # Only works for a "%.(extobj) : %.cpp" compilation.
# (3) Directly call make on file.$(extasm).
#   (This does not require any change to the Makefile.)

endif  # ifneq ($(CONFIG),all)
